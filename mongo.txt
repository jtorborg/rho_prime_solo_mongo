//1. Create a collection named orders.
db.createCollection("orders")


//2. Insert at least 3 documents that represent an order. IMPORTANT: See section below for fields.

db.orders.insert({orderDate: new Date("August 29, 2016"), orderTotal: 120.00,
lineItems: ["line item object 1", "line item object 2",], unitPrice: 60.00, quantity: 2, productName: 'magnatiles'})

db.orders.insert({orderDate: new Date("August 29, 2016"), orderTotal: 80.00,
lineItems: ["line item object 1", "line item object 2",], unitPrice: 20.00, quantity: 4, productName: 'lunch boxes'})

db.orders.insert({orderDate: new Date("January 1, 2005"), orderTotal: 200.00,
lineItems: ["line item object 1", "line item object 2",], unitPrice: 2.00, quantity: 100, productName: 'lipstick'})


//3. Find a single order document, any order document.

orders.findOne()


//4. Find all orders and make them look pretty.

db.orders.find().pretty()

//5. Find all orders with an orderDate that is prior to 1/1/2016.

db.orders.find({orderDate: {$lt: new Date("2016-01-01")}});


//6. Find all orders with an orderDate that is after 1/1/2016.

db.orders.find({orderDate: {$gt: new Date("2016-01-01")}});


//7. Find orders with lineItems that have a quantity that is less than 50, but greater than 5. HINT: Look at $and and dot notation.

> db.orders.find({ "quantity": { "$gte": 1, "$lte": 50 } })


//8. Update one of your line items to 42.99. HINT: Look at dot notation

orders.update({"lineItems.1":{$exists: true}}, {$rename: {"unitPrice": "42.99"}})

//9. Remove one of your orders.

orders.remove({"productName": "lunch boxes"});
